CREATE DATABASE TASK_ASSIGNMENT;

USE TASK_ASSIGNMENT;

CREATE TABLE CATEGORIES (
    CATEGORY_ID INT PRIMARY KEY,
    CATEGORY_NAME VARCHAR(100) NOT NULL
);

INSERT INTO CATEGORIES (CATEGORY_ID,CATEGORY_NAME) VALUES (1, 'Electronics'), (2, 'Home Appliances'), (3, 'Fashion');

CREATE TABLE PRODUCTS (
    PRODUCT_ID INT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    PRICE DECIMAL(10,2),
    STOCK INT CHECK (stock >= 0),
    CATEGORY_ID INT,
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID)
);

INSERT INTO PRODUCTS (PRODUCT_ID, NAME, PRICE, STOCK, CATEGORY_ID) VALUES 
    (101, 'Laptop', 799.99, 30, 1),
    (102, 'Vacuum Cleaner', 199.99, 50, 2),
    (103, 'T-Shirt', 25.00, 150, 3),
    (104, 'Smartwatch', 299.99, 50, 1);
    
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EMAIL VARCHAR(100) UNIQUE,
    PHONE VARCHAR(15),
    AGE INT CHECK (AGE >= 18)
);

INSERT INTO CUSTOMERS (CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, AGE) VALUES 
    (1, 'Kavana', 'Sagar', 'kavana@gmail.com', '9878656765', 25),
    (2, 'Kavya', 'Singh', 'kavya@gmail.com', '7898767876', 30),
    (3, 'Kaveri', 'Rao', 'kaveri@gmail.com', '8798999897', 22);
    
CREATE TABLE ORDERS (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT,
    PRODUCT_ID INT,
    QUANTITY INT NOT NULL,
    TOTAL_PRICE DECIMAL(10,2),
    ORDER_DATE DATE,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
);

INSERT INTO orders (ORDER_ID, CUSTOMER_ID, PRODUCT_ID, QUANTITY, TOTAL_PRICE, ORDER_DATE) VALUES 
    (1, 1, 101, 1, 799.99, '2024-10-20'),
    (2, 2, 102, 2, 399.98, '2024-10-21'),
    (3, 3, 103, 5, 125.00, '2024-10-21'),
    (4, 1, 104, 2, 599.98, '2024-10-22');
    
CREATE TABLE REVIEWS (
    REVIEW_ID INT PRIMARY KEY,
    PRODUCT_ID INT,
    CUSTOMER_ID INT,
    REVIEW_TEXT TEXT,
    REVIEW_DATE DATE,
    CONSTRAINT fk_product_review FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
    CONSTRAINT fk_customer_review FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

INSERT INTO REVIEWS (REVIEW_ID, PRODUCT_ID, CUSTOMER_ID, REVIEW_TEXT, REVIEW_DATE) VALUES 
    (1, 101, 1, 'Excellent laptop!', '2024-10-20'),
    (2, 102, 2, 'Works perfectly!', '2024-10-21'),
    (3, 103, 3, 'Nice T-shirt, good quality.', '2024-10-21');
    
SELECT PRODUCT_ID, SUM(QUANTITY * TOTAL_PRICE) AS TOTAL_REVENUE FROM ORDERS GROUP BY PRODUCT_ID;

SELECT MIN(TOTAL_PRICE) AS MINIMUM_ORDER, MAX(TOTAL_PRICE) AS MAXIMUM_ORDER FROM ORDERS;

SELECT AVG(PRICE) AS AVERAGE_PRICE FROM PRODUCTS;

SELECT COUNT(DISTINCT CUSTOMER_ID) AS UNIQUE_CUSTOMER FROM ORDERS;

SELECT ORDER_DATE, COUNT(ORDER_ID) AS TOTAL_ORDERS FROM ORDERS GROUP BY ORDER_DATE;

SELECT * FROM ORDERS WHERE TOTAL_PRICE > 500;

SELECT * FROM PRODUCTS WHERE PRICE BETWEEN 100 AND 500;

SELECT * FROM ORDERS WHERE CUSTOMER_ID IN (1, 2, 3);

INSERT INTO PRODUCTS (PRODUCT_ID, NAME, PRICE, STOCK, CATEGORY_ID) VALUES (105, 'Smartwatch', 299.99, 50, 1);

UPDATE PRODUCTS SET STOCK = 75 WHERE PRODUCT_ID = 102;

SET FOREIGN_KEY_CHECKS = 0;

DELETE FROM PRODUCTS WHERE STOCK < 10;

SET FOREIGN_KEY_CHECKS = 1;

ALTER TABLE ORDERS ADD DELIVERY_DATE DATE;

DROP TABLE REVIEWS;